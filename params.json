{
  "name": "Semantic job recommendation engine",
  "tagline": "Sachin.Sikander.Nausheen",
  "body": "# Problem Statement\r\nA recruiter wants to select the best CVs which suit his job requirement. To do this, one need to semantically match the words mentioned by candidate in the resume to those mentioned in the job description and get the best candidates suitable for the job. We need to design a search engine which takes the requirements of the job such as the skills and the position as the input and outputs a ranked list of CV in order of their relevance to the opening.\r\n\r\n# Applications\r\nA particular job vacancy may receive huge number of applications.Manually sorting the CVs is practically impossible.Sorting out the suitable CVs from thousands(or possibly lakhs) of applications is a very challenging problem.We aim to build a system in which given a job title/description(query),the system can retrieve the suitable CVs(documents) and rank them according to some relevance measure .\r\n\r\nThis can be applied in various job portals/websites  such as LinkedIn,monster.com, theladder.com,etc. to select CVs for a particular job.\r\n\r\nSimilar recommendation systems has widely been used in various applications such as music, movie(Youtube), product(Flipkart,Amazon), computational advertisements,news articles recommendation systems,where a  new item is recommended by modelling the behaviour of past history of user selections.\r\n\r\n# Procedure\r\n## 1)Extracting the text :\r\nAs most of the CV are in pdf formats, this becomes a major problem. Many modules do not convert the tables in pdf format properly into text files. This results in complication related to data of the individual. The most suitable module to perform this task is Java’s pdfbox which can convert table rows into simple lines in text format.\r\n\r\n\r\n## 2)Applying regex to retrieve data from the text files: \r\nUsing simple techniques like  pattern matching and regex , we found the name, college, highest degree, phone number, email-id , etc of the individual. This knowledge helps us to recognise the individual. We also built a User-Interface in which a resume in pdf format was uploaded and it gave output as the information of the individual. This part was performed in the second deliverable.\r\n\r\n\r\n### Creating pages manually\r\nIf you prefer to not use the automatic generator, push a branch named `gh-pages` to your repository to create a page manually. In addition to supporting regular HTML content, GitHub Pages support Jekyll, a simple, blog aware static site generator. Jekyll makes it easy to create site-wide headers and footers without having to copy them across every page. It also offers intelligent blog support and other advanced templating features.\r\n\r\n### Authors and Contributors\r\nYou can @mention a GitHub username to generate a link to their profile. The resulting `<a>` element will link to the contributor’s GitHub Profile. For example: In 2007, Chris Wanstrath (@defunkt), PJ Hyett (@pjhyett), and Tom Preston-Werner (@mojombo) founded GitHub.\r\n\r\n### Support or Contact\r\nHaving trouble with Pages? Check out our [documentation](https://help.github.com/pages) or [contact support](https://github.com/contact) and we’ll help you sort it out.\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}